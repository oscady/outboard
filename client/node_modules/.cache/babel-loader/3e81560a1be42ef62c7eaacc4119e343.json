{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/oscady/Documents/projects/outboard/client/src/pages/Music/TrackList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { TracklistContainer } from './TrackList.styled';\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport { setAudioPlaying, setAudioPaused } from '../../actions/audioActions';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlaylist, PlaylistContext } from '../../data/playlist';\nimport styled from 'styled-components';\nimport { getTracks } from '../../actions/trackUploadActions';\nimport { getReleases } from '../../actions/releaseActions';\n\nconst Tracklist = props => {\n  _s();\n\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n\n  const handleFetchData = () => {\n    props.getReleases();\n    const tracks = props.release.releases;\n    props.setTheImage(tracks.artwork);\n    console.log(props.release.releases);\n    setPlaylist(tracks);\n  };\n\n  const handleChangeTrack = id => {\n    setCurrentTrack(id);\n  };\n\n  const handleNextTrack = () => {\n    if (currentTrack === playlist.length - 1) {\n      setCurrentTrack(0);\n      return;\n    }\n\n    setCurrentTrack(currentTrack + 1);\n  };\n\n  const handlePrevTrack = () => {\n    if (currentTrack === 0) {\n      setCurrentTrack(playlist.length - 1);\n      return;\n    }\n\n    setCurrentTrack(currentTrack - 1);\n  };\n\n  const Loading = styled.div`\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t`;\n  useEffect(() => {\n    handleFetchData();\n  }, []);\n  useEffect(() => {\n    const tracks = props.track.tracks;\n    setPlaylist(tracks);\n  }, [props.track.tracks]);\n  return /*#__PURE__*/_jsxDEV(PlaylistContext.Provider, {\n    children: [console.log(playlist), /*#__PURE__*/_jsxDEV(TracklistContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"outboard 001\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"feb 2020\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"featured tracks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: playlist.length === 0 ? /*#__PURE__*/_jsxDEV(Loading, {\n          children: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this) : playlist.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [track.id !== currentTrack ? /*#__PURE__*/_jsxDEV(FaPlay, {\n              onClick: handleChangeTrack(track.id),\n              style: {\n                cursor: 'pointer',\n                marginRight: '10px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 11\n            }, this) : /*#__PURE__*/_jsxDEV(FaPause, {\n              onClick: props.setAudioPaused,\n              style: {\n                cursor: 'pointer',\n                marginRight: '10px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 11\n            }, this), track.artistName + ' - ' + track.trackName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"buy track\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 8\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Tracklist, \"WuUDuPwk61OQft+a6csc2W/EwXk=\");\n\n_c = Tracklist;\nTracklist.propTypes = {\n  setAudioPlaing: PropTypes.func,\n  setAudioPaused: PropTypes.func,\n  getTracks: PropTypes.func.isRequired,\n  track: PropTypes.object,\n  getReleases: PropTypes.func.isRequired,\n  release: PropTypes.object,\n  audio: PropTypes.object,\n  playing: PropTypes.bool,\n  currentTrack: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  audio: state.audio,\n  track: state.track,\n  release: state.release\n});\n\nexport default connect(mapStateToProps, {\n  setAudioPlaying,\n  setAudioPaused,\n  getTracks,\n  getReleases\n})(Tracklist);\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracklist\");","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/pages/Music/TrackList.js"],"names":["React","useEffect","useState","TracklistContainer","FaPlay","FaPause","setAudioPlaying","setAudioPaused","PropTypes","connect","fetchPlaylist","PlaylistContext","styled","getTracks","getReleases","Tracklist","props","playlist","setPlaylist","currentTrack","setCurrentTrack","handleFetchData","tracks","release","releases","setTheImage","artwork","console","log","handleChangeTrack","id","handleNextTrack","length","handlePrevTrack","Loading","div","track","map","cursor","marginRight","artistName","trackName","propTypes","setAudioPlaing","func","isRequired","object","audio","playing","bool","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TracklistContainer } from './TrackList.styled';\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport { setAudioPlaying, setAudioPaused } from '../../actions/audioActions';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlaylist, PlaylistContext } from '../../data/playlist';\nimport styled from 'styled-components';\nimport { getTracks } from '../../actions/trackUploadActions';\nimport { getReleases } from '../../actions/releaseActions';\n\nconst Tracklist = (props) => {\n\tconst [ playlist, setPlaylist ] = useState([]);\n\tconst [ currentTrack, setCurrentTrack ] = useState();\n\n\tconst handleFetchData = () => {\n\t\tprops.getReleases();\n\t\tconst tracks = props.release.releases;\n\t\tprops.setTheImage(tracks.artwork);\n\t\tconsole.log(props.release.releases);\n\t\tsetPlaylist(tracks);\n\t};\n\n\tconst handleChangeTrack = (id) => {\n\t\tsetCurrentTrack(id);\n\t};\n\n\tconst handleNextTrack = () => {\n\t\tif (currentTrack === playlist.length - 1) {\n\t\t\tsetCurrentTrack(0);\n\t\t\treturn;\n\t\t}\n\t\tsetCurrentTrack(currentTrack + 1);\n\t};\n\n\tconst handlePrevTrack = () => {\n\t\tif (currentTrack === 0) {\n\t\t\tsetCurrentTrack(playlist.length - 1);\n\t\t\treturn;\n\t\t}\n\t\tsetCurrentTrack(currentTrack - 1);\n\t};\n\n\tconst Loading = styled.div`\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t`;\n\n\tuseEffect(() => {\n\t\thandleFetchData();\n\t}, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tconst tracks = props.track.tracks;\n\t\t\tsetPlaylist(tracks);\n\t\t},\n\t\t[ props.track.tracks ]\n\t);\n\n\treturn (\n\t\t<PlaylistContext.Provider>\n\t\t\t{console.log(playlist)}\n\t\t\t<TracklistContainer>\n\t\t\t\t<h1>outboard 001</h1>\n\t\t\t\t<h2>feb 2020</h2>\n\t\t\t\t<h3>featured tracks</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t{playlist.length === 0 ? (\n\t\t\t\t\t\t<Loading>loading</Loading>\n\t\t\t\t\t) : (\n\t\t\t\t\t\tplaylist.map((track) => (\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{track.id !== currentTrack ? (\n\t\t\t\t\t\t\t\t\t\t<FaPlay\n\t\t\t\t\t\t\t\t\t\t\tonClick={handleChangeTrack(track.id)}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer', marginRight: '10px' }}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<FaPause\n\t\t\t\t\t\t\t\t\t\t\tonClick={props.setAudioPaused}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer', marginRight: '10px' }}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{track.artistName + ' - ' + track.trackName}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<a>buy track</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</TracklistContainer>\n\t\t</PlaylistContext.Provider>\n\t);\n};\n\nTracklist.propTypes = {\n\tsetAudioPlaing: PropTypes.func,\n\tsetAudioPaused: PropTypes.func,\n\tgetTracks: PropTypes.func.isRequired,\n\ttrack: PropTypes.object,\n\tgetReleases: PropTypes.func.isRequired,\n\trelease: PropTypes.object,\n\taudio: PropTypes.object,\n\tplaying: PropTypes.bool,\n\tcurrentTrack: PropTypes.object\n};\n\nconst mapStateToProps = (state) => ({ audio: state.audio, track: state.track, release: state.release });\n\nexport default connect(mapStateToProps, { setAudioPlaying, setAudioPaused, getTracks, getReleases })(Tracklist);\n"]},"metadata":{},"sourceType":"module"}