{"ast":null,"code":"import { GET_RELEASES, ADD_RELEASE, DELETE_RELEASE, RELEASES_LOADING, RELEASES_LOADED, GET_SINGLE_RELEASE, SET_RELEASE_PLAYLIST } from './types';\nimport axios from 'axios'; // get releases action sent to reducer\n\nexport const getReleases = () => dispatch => {\n  dispatch(setReleasesLoading(console.log('releases are loading...')));\n  axios.get('/api/release').then(res => dispatch({\n    type: GET_RELEASES,\n    payload: res.data\n  }));\n  dispatch(setReleasesLoaded(console.log('releases are loaded...')));\n}; // get single project\n\nexport const getSingleRelease = id => dispatch => {\n  dispatch(setReleasesLoading());\n  axios.get(`/api/release/${id}`).then(res => dispatch({\n    type: GET_SINGLE_RELEASE,\n    payload: res.data\n  })).catch(err => console.error(\"Can't get release\", err));\n}; // get single project\n\nexport const setReleasePlaylist = id => dispatch => {\n  dispatch(setReleasesLoading());\n  axios.get(`/api/release/${id}`).then(res => dispatch({\n    type: SET_RELEASE_PLAYLIST,\n    payload: res.data\n  })).catch(err => console.error(\"Can't get release\", err));\n  dispatch(setReleasesLoaded(console.log('releases are loaded...')));\n}; // add new release sent to reducer\n\nexport const addRelease = release => dispatch => {\n  dispatch(setReleasesLoading(console.log('releases are loading...')));\n  axios.post('/api/release', release).then(res => dispatch({\n    type: ADD_RELEASE,\n    payload: res.data\n  }));\n}; // delete release by id request sent to reducer\n\nexport const deleteRelease = id => dispatch => {\n  axios.delete(`/api/release/${id}`).then(res => dispatch({\n    type: DELETE_RELEASE,\n    payload: id\n  }));\n}; // loading releases graphic sent to reducer\n\nexport const setReleasesLoading = release => {\n  return {\n    type: RELEASES_LOADING\n  };\n}; // loaded releases graphic sent to reducer\n\nexport const setReleasesLoaded = release => {\n  return {\n    type: RELEASES_LOADED\n  };\n};","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/actions/releaseActions.js"],"names":["GET_RELEASES","ADD_RELEASE","DELETE_RELEASE","RELEASES_LOADING","RELEASES_LOADED","GET_SINGLE_RELEASE","SET_RELEASE_PLAYLIST","axios","getReleases","dispatch","setReleasesLoading","console","log","get","then","res","type","payload","data","setReleasesLoaded","getSingleRelease","id","catch","err","error","setReleasePlaylist","addRelease","release","post","deleteRelease","delete"],"mappings":"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","sourcesContent":["import {\n\tGET_RELEASES,\n\tADD_RELEASE,\n\tDELETE_RELEASE,\n\tRELEASES_LOADING,\n\tRELEASES_LOADED,\n\tGET_SINGLE_RELEASE,\n\tSET_RELEASE_PLAYLIST\n} from './types';\nimport axios from 'axios';\n\n// get releases action sent to reducer\nexport const getReleases = () => (dispatch) => {\n\tdispatch(setReleasesLoading(console.log('releases are loading...')));\n\taxios.get('/api/release').then((res) =>\n\t\tdispatch({\n\t\t\ttype: GET_RELEASES,\n\t\t\tpayload: res.data\n\t\t})\n\t);\n\tdispatch(setReleasesLoaded(console.log('releases are loaded...')));\n};\n\n// get single project\nexport const getSingleRelease = (id) => (dispatch) => {\n\tdispatch(setReleasesLoading());\n\taxios\n\t\t.get(`/api/release/${id}`)\n\t\t.then((res) => dispatch({ type: GET_SINGLE_RELEASE, payload: res.data }))\n\t\t.catch((err) => console.error(\"Can't get release\", err));\n};\n\n// get single project\nexport const setReleasePlaylist = (id) => (dispatch) => {\n\tdispatch(setReleasesLoading());\n\taxios\n\t\t.get(`/api/release/${id}`)\n\t\t.then((res) => dispatch({ type: SET_RELEASE_PLAYLIST, payload: res.data }))\n\t\t.catch((err) => console.error(\"Can't get release\", err));\n\tdispatch(setReleasesLoaded(console.log('releases are loaded...')));\n};\n// add new release sent to reducer\nexport const addRelease = (release) => (dispatch) => {\n\tdispatch(setReleasesLoading(console.log('releases are loading...')));\n\taxios.post('/api/release', release).then((res) =>\n\t\tdispatch({\n\t\t\ttype: ADD_RELEASE,\n\t\t\tpayload: res.data\n\t\t})\n\t);\n};\n\n// delete release by id request sent to reducer\nexport const deleteRelease = (id) => (dispatch) => {\n\taxios.delete(`/api/release/${id}`).then((res) =>\n\t\tdispatch({\n\t\t\ttype: DELETE_RELEASE,\n\t\t\tpayload: id\n\t\t})\n\t);\n};\n\n// loading releases graphic sent to reducer\nexport const setReleasesLoading = (release) => {\n\treturn {\n\t\ttype: RELEASES_LOADING\n\t};\n};\n// loaded releases graphic sent to reducer\nexport const setReleasesLoaded = (release) => {\n\treturn {\n\t\ttype: RELEASES_LOADED\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}