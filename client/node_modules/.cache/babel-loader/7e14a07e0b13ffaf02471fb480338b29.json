{"ast":null,"code":"import { GET_RELEASES, ADD_RELEASE, RELEASES_LOADING, RELEASES_LOADED } from '../actions/types';\nconst initialState = {\n  tracks: [],\n  loading: false\n}; // export tracks in current state + changes\n\nconst releaseReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_RELEASES:\n      return { ...state,\n        // return state of tracks\n        releases: action.payload,\n        loading: false\n      };\n\n    case ADD_RELEASE:\n      return { ...state,\n        releases: [action.payload, ...state.tracks] // copy state and return with new image\n\n      };\n\n    case RELEASES_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case RELEASES_LOADED:\n      return { ...state,\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default releaseReducer;","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/reducers/releaseReducer.js"],"names":["GET_RELEASES","ADD_RELEASE","RELEASES_LOADING","RELEASES_LOADED","initialState","tracks","loading","releaseReducer","state","action","type","releases","payload"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,WAAvB,EAAoCC,gBAApC,EAAsDC,eAAtD,QAA6E,kBAA7E;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,MAAM,EAAE,EADY;AAEpBC,EAAAA,OAAO,EAAE;AAFW,CAArB,C,CAIA;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKV,YAAL;AACC,aAAO,EACN,GAAGQ,KADG;AACI;AACVG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFX;AAGNN,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKL,WAAL;AACC,aAAO,EACN,GAAGO,KADG;AAENG,QAAAA,QAAQ,EAAE,CAAEF,MAAM,CAACG,OAAT,EAAkB,GAAGJ,KAAK,CAACH,MAA3B,CAFJ,CAEwC;;AAFxC,OAAP;;AAID,SAAKH,gBAAL;AACC,aAAO,EACN,GAAGM,KADG;AAENF,QAAAA,OAAO,EAAE;AAFH,OAAP;;AAID,SAAKH,eAAL;AACC,aAAO,EACN,GAAGK,KADG;AAENF,QAAAA,OAAO,EAAE;AAFH,OAAP;;AAID;AACC,aAAOE,KAAP;AAvBF;AAyBA,CA1BD;;AA4BA,eAAeD,cAAf","sourcesContent":["import { GET_RELEASES, ADD_RELEASE, RELEASES_LOADING, RELEASES_LOADED } from '../actions/types';\n\nconst initialState = {\n\ttracks: [],\n\tloading: false\n};\n// export tracks in current state + changes\nconst releaseReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase GET_RELEASES:\n\t\t\treturn {\n\t\t\t\t...state, // return state of tracks\n\t\t\t\treleases: action.payload,\n\t\t\t\tloading: false\n\t\t\t};\n\t\tcase ADD_RELEASE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\treleases: [ action.payload, ...state.tracks ] // copy state and return with new image\n\t\t\t};\n\t\tcase RELEASES_LOADING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true\n\t\t\t};\n\t\tcase RELEASES_LOADED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default releaseReducer;\n"]},"metadata":{},"sourceType":"module"}