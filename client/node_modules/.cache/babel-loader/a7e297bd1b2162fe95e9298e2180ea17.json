{"ast":null,"code":"import { GET_ITEMS, GET_SINGLE_ITEM, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING\n/*EDIT_ITEM*/\n} from '../actions/types';\nconst initialState = {\n  items: [],\n  singleItem: {},\n  loading: false\n}; // export items in current state + changes\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_ITEMS:\n      return { ...state,\n        // return state of items\n        items: action.payload,\n        loading: false\n      };\n\n    case GET_SINGLE_ITEM:\n      return { ...state,\n        // return state of items\n        singleItem: state.items.filter(item => item._id === action.payload),\n        loading: false\n      };\n\n    case DELETE_ITEM:\n      return { ...state,\n        items: state.items.filter(item => item._id !== action.payload) //return state without selected id\n\n      };\n\n    case ADD_ITEM:\n      return { ...state,\n        items: [action.payload, ...state.items] // copy state and return with new item\n\n      };\n\n    case ITEMS_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/reducers/itemReducer.js"],"names":["GET_ITEMS","GET_SINGLE_ITEM","ADD_ITEM","DELETE_ITEM","ITEMS_LOADING","initialState","items","singleItem","loading","state","action","type","payload","filter","item","_id"],"mappings":"AAAA,SACEA,SADF,EACaC,eADb,EAC8BC,QAD9B,EACwCC,WADxC,EACqDC;AAAa;AADlE,OAEO,kBAFP;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,UAAU,EAAE,EAFO;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB,C,CAKA;;AACA,eAAe,UAAUC,KAAK,GAAGJ,YAAlB,EAAgCK,MAAhC,EAAwC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,SAAL;AACE,aAAO,EACL,GAAGS,KADE;AACK;AACVH,QAAAA,KAAK,EAAEI,MAAM,CAACE,OAFT;AAGLJ,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKA,SAAKP,eAAL;AACE,aAAO,EACL,GAAGQ,KADE;AACK;AACVF,QAAAA,UAAU,EAAEE,KAAK,CACdH,KADS,CAETO,MAFS,CAEFC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAF1B,CAFP;AAKLJ,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOJ,SAAKL,WAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,KAAK,EAAEG,KAAK,CACTH,KADI,CAEJO,MAFI,CAEGC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAF/B,CAFF,CAI0C;;AAJ1C,OAAP;;AAMF,SAAKV,QAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,KAAK,EAAE,CACLI,MAAM,CAACE,OADF,EACW,GAAGH,KAAK,CAACH,KADpB,CAFF,CAIH;;AAJG,OAAP;;AAMF,SAAKF,aAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELD,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAKF;AACE,aAAOC,KAAP;AApCJ;AAsCD","sourcesContent":["import {\n  GET_ITEMS, GET_SINGLE_ITEM, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING/*EDIT_ITEM*/\n} from '../actions/types';\n\nconst initialState = {\n  items: [],\n  singleItem: {},\n  loading: false\n}\n// export items in current state + changes\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_ITEMS:\n      return {\n        ...state, // return state of items\n        items: action.payload,\n        loading: false\n      };\n      case GET_SINGLE_ITEM:\n        return {\n          ...state, // return state of items\n          singleItem: state\n            .items\n            .filter(item => item._id === action.payload),\n          loading: false\n        };\n    case DELETE_ITEM:\n      return {\n        ...state,\n        items: state\n          .items\n          .filter(item => item._id !== action.payload) //return state without selected id\n      };\n    case ADD_ITEM:\n      return {\n        ...state,\n        items: [\n          action.payload, ...state.items\n        ] // copy state and return with new item\n      };\n    case ITEMS_LOADING:\n      return {\n        ...state,\n        loading: true\n      }\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}