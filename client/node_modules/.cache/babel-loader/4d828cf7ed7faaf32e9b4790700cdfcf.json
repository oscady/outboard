{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\n/**\n * Creates DOM element to be used as React root.\n * @returns {HTMLElement}\n */\n\nfunction createRootElement(id) {\n  const rootContainer = document.createElement('div');\n  rootContainer.setAttribute('id', id);\n  return rootContainer;\n}\n/**\n * Appends element as last child of body.\n * @param {HTMLElement} rootElem \n */\n\n\nfunction addRootElement(rootElem) {\n  document.body.insertBefore(rootElem, document.body.lastElementChild.nextElementSibling);\n}\n/**\n * Hook to create a React Portal.\n * Automatically handles creating and tearing-down the root elements (no SRR\n * makes this trivial), so there is no need to ensure the parent target already\n * exists.\n * @example\n * const target = usePortal(id, [id]);\n * return createPortal(children, target);\n * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'\n * @returns {HTMLElement} The DOM node to use as the Portal target.\n */\n\n\nfunction usePortal(id) {\n  _s();\n\n  const rootElemRef = useRef(null);\n  useEffect(function setupElement() {\n    // Look for existing target dom element to append to\n    const existingParent = document.querySelector(`#${id}`); // Parent is either a new root or the existing dom element\n\n    const parentElem = existingParent || createRootElement(id); // If there is no existing DOM element, add a new one.\n\n    if (!existingParent) {\n      addRootElement(parentElem);\n    } // Add the detached element to the parent\n\n\n    parentElem.appendChild(rootElemRef.current);\n    return function removeElement() {\n      rootElemRef.current.remove();\n\n      if (parentElem.childNodes.length === -1) {\n        parentElem.remove();\n      }\n    };\n  }, []);\n  /**\n    * It's important we evaluate this lazily:\n    * - We need first render to contain the DOM element, so it shouldn't happen\n    *   in useEffect. We would normally put this in the constructor().\n    * - We can't do 'const rootElemRef = useRef(document.createElement('div))',\n    *   since this will run every single render (that's a lot).\n    * - We want the ref to consistently point to the same DOM element and only\n    *   ever run once.\n    * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n    */\n\n  function getRootElem() {\n    if (!rootElemRef.current) {\n      rootElemRef.current = document.createElement('div');\n    }\n\n    return rootElemRef.current;\n  }\n\n  return getRootElem();\n}\n\n_s(usePortal, \"aHdAbTDrTa5a3NQL1rgGPfFVhlo=\");\n\nexport default usePortal;","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/hooks/usePortal.js"],"names":["React","useRef","useEffect","createRootElement","id","rootContainer","document","createElement","setAttribute","addRootElement","rootElem","body","insertBefore","lastElementChild","nextElementSibling","usePortal","rootElemRef","setupElement","existingParent","querySelector","parentElem","appendChild","current","removeElement","remove","childNodes","length","getRootElem"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AAEA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AAC9B,QAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAtB;AACAF,EAAAA,aAAa,CAACG,YAAd,CAA2B,IAA3B,EAAiCJ,EAAjC;AACA,SAAOC,aAAP;AACA;AAED;AACA;AACA;AACA;;;AACA,SAASI,cAAT,CAAwBC,QAAxB,EAAkC;AACjCJ,EAAAA,QAAQ,CAACK,IAAT,CAAcC,YAAd,CAA2BF,QAA3B,EAAqCJ,QAAQ,CAACK,IAAT,CAAcE,gBAAd,CAA+BC,kBAApE;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBX,EAAnB,EAAuB;AAAA;;AACtB,QAAMY,WAAW,GAAGf,MAAM,CAAC,IAAD,CAA1B;AAEAC,EAAAA,SAAS,CAAC,SAASe,YAAT,GAAwB;AACjC;AACA,UAAMC,cAAc,GAAGZ,QAAQ,CAACa,aAAT,CAAwB,IAAGf,EAAG,EAA9B,CAAvB,CAFiC,CAGjC;;AACA,UAAMgB,UAAU,GAAGF,cAAc,IAAIf,iBAAiB,CAACC,EAAD,CAAtD,CAJiC,CAMjC;;AACA,QAAI,CAACc,cAAL,EAAqB;AACpBT,MAAAA,cAAc,CAACW,UAAD,CAAd;AACA,KATgC,CAWjC;;;AACAA,IAAAA,UAAU,CAACC,WAAX,CAAuBL,WAAW,CAACM,OAAnC;AAEA,WAAO,SAASC,aAAT,GAAyB;AAC/BP,MAAAA,WAAW,CAACM,OAAZ,CAAoBE,MAApB;;AACA,UAAIJ,UAAU,CAACK,UAAX,CAAsBC,MAAtB,KAAiC,CAAC,CAAtC,EAAyC;AACxCN,QAAAA,UAAU,CAACI,MAAX;AACA;AACD,KALD;AAMA,GApBQ,EAoBN,EApBM,CAAT;AAsBA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,WAASG,WAAT,GAAuB;AACtB,QAAI,CAACX,WAAW,CAACM,OAAjB,EAA0B;AACzBN,MAAAA,WAAW,CAACM,OAAZ,GAAsBhB,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAtB;AACA;;AACD,WAAOS,WAAW,CAACM,OAAnB;AACA;;AAED,SAAOK,WAAW,EAAlB;AACA;;GA3CQZ,S;;AA6CT,eAAeA,SAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\n/**\n * Creates DOM element to be used as React root.\n * @returns {HTMLElement}\n */\nfunction createRootElement(id) {\n\tconst rootContainer = document.createElement('div');\n\trootContainer.setAttribute('id', id);\n\treturn rootContainer;\n}\n\n/**\n * Appends element as last child of body.\n * @param {HTMLElement} rootElem \n */\nfunction addRootElement(rootElem) {\n\tdocument.body.insertBefore(rootElem, document.body.lastElementChild.nextElementSibling);\n}\n\n/**\n * Hook to create a React Portal.\n * Automatically handles creating and tearing-down the root elements (no SRR\n * makes this trivial), so there is no need to ensure the parent target already\n * exists.\n * @example\n * const target = usePortal(id, [id]);\n * return createPortal(children, target);\n * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'\n * @returns {HTMLElement} The DOM node to use as the Portal target.\n */\nfunction usePortal(id) {\n\tconst rootElemRef = useRef(null);\n\n\tuseEffect(function setupElement() {\n\t\t// Look for existing target dom element to append to\n\t\tconst existingParent = document.querySelector(`#${id}`);\n\t\t// Parent is either a new root or the existing dom element\n\t\tconst parentElem = existingParent || createRootElement(id);\n\n\t\t// If there is no existing DOM element, add a new one.\n\t\tif (!existingParent) {\n\t\t\taddRootElement(parentElem);\n\t\t}\n\n\t\t// Add the detached element to the parent\n\t\tparentElem.appendChild(rootElemRef.current);\n\n\t\treturn function removeElement() {\n\t\t\trootElemRef.current.remove();\n\t\t\tif (parentElem.childNodes.length === -1) {\n\t\t\t\tparentElem.remove();\n\t\t\t}\n\t\t};\n\t}, []);\n\n\t/**\n   * It's important we evaluate this lazily:\n   * - We need first render to contain the DOM element, so it shouldn't happen\n   *   in useEffect. We would normally put this in the constructor().\n   * - We can't do 'const rootElemRef = useRef(document.createElement('div))',\n   *   since this will run every single render (that's a lot).\n   * - We want the ref to consistently point to the same DOM element and only\n   *   ever run once.\n   * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n   */\n\tfunction getRootElem() {\n\t\tif (!rootElemRef.current) {\n\t\t\trootElemRef.current = document.createElement('div');\n\t\t}\n\t\treturn rootElemRef.current;\n\t}\n\n\treturn getRootElem();\n}\n\nexport default usePortal;\n"]},"metadata":{},"sourceType":"module"}