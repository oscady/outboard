{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/oscady/Documents/projects/outboard/client/src/pages/Music/TrackList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { TracklistContainer } from './TrackList.styled';\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport { setAudioPlaying, setAudioPaused } from '../../actions/audioActions';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlaylist, PlaylistContext } from '../../data/playlist';\nimport styled from 'styled-components';\n\nconst Tracklist = props => {\n  _s();\n\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState();\n\n  const handleFetchData = async () => {\n    const playlist = await fetchPlaylist();\n    setPlaylist(playlist);\n  };\n\n  const handleChangeTrack = id => {\n    setCurrentTrack(id);\n    props.setAudioPlaying();\n  };\n\n  const Loading = styled.div`\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t`;\n  useEffect(() => {\n    handleFetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TracklistContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"outboard 001\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"feb 2020\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"featured tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: playlist.length === 0 ? /*#__PURE__*/_jsxDEV(Loading, {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 6\n      }, this) : playlist.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [track.id !== currentTrack ? /*#__PURE__*/_jsxDEV(FaPlay, {\n            onClick: handleChangeTrack(track.id),\n            style: {\n              cursor: 'pointer',\n              marginRight: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 10\n          }, this) : /*#__PURE__*/_jsxDEV(FaPause, {\n            onClick: props.setAudioPaused,\n            style: {\n              cursor: 'pointer',\n              marginRight: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 10\n          }, this), ' ', \"rimba - track 1\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 8\n        }, this), ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n          children: \"buy track\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Tracklist, \"UMCgD6/JKzV4ReNkntXuepcrIGo=\");\n\n_c = Tracklist;\nTracklist.propTypes = {\n  setAudioPlaing: PropTypes.func,\n  setAudioPaused: PropTypes.func,\n  playing: PropTypes.bool,\n  currentTrack: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  audio: state.audio\n});\n\nexport default connect(mapStateToProps, {\n  setAudioPlaying,\n  setAudioPaused\n})(Tracklist);\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracklist\");","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/pages/Music/TrackList.js"],"names":["React","useEffect","useState","TracklistContainer","FaPlay","FaPause","setAudioPlaying","setAudioPaused","PropTypes","connect","fetchPlaylist","PlaylistContext","styled","Tracklist","props","playlist","setPlaylist","currentTrack","setCurrentTrack","handleFetchData","handleChangeTrack","id","Loading","div","length","map","track","cursor","marginRight","propTypes","setAudioPlaing","func","playing","bool","object","mapStateToProps","state","audio"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TracklistContainer } from './TrackList.styled';\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport { setAudioPlaying, setAudioPaused } from '../../actions/audioActions';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlaylist, PlaylistContext } from '../../data/playlist';\nimport styled from 'styled-components';\nconst Tracklist = (props) => {\n\tconst [ playlist, setPlaylist ] = useState([]);\n\tconst [ currentTrack, setCurrentTrack ] = useState();\n\n\tconst handleFetchData = async () => {\n\t\tconst playlist = await fetchPlaylist();\n\t\tsetPlaylist(playlist);\n\t};\n\n\tconst handleChangeTrack = (id) => {\n\t\tsetCurrentTrack(id);\n\t\tprops.setAudioPlaying();\n\t};\n\n\tconst Loading = styled.div`\n\t\tposition: absolute;\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t`;\n\n\tuseEffect(() => {\n\t\thandleFetchData();\n\t}, []);\n\n\treturn (\n\t\t<TracklistContainer>\n\t\t\t<h1>outboard 001</h1>\n\t\t\t<h2>feb 2020</h2>\n\t\t\t<h3>featured tracks</h3>\n\t\t\t<ul>\n\t\t\t\t{playlist.length === 0 ? (\n\t\t\t\t\t<Loading>loading...</Loading>\n\t\t\t\t) : (\n\t\t\t\t\tplaylist.map((track) => (\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{track.id !== currentTrack ? (\n\t\t\t\t\t\t\t\t\t<FaPlay\n\t\t\t\t\t\t\t\t\t\tonClick={handleChangeTrack(track.id)}\n\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer', marginRight: '10px' }}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<FaPause\n\t\t\t\t\t\t\t\t\t\tonClick={props.setAudioPaused}\n\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer', marginRight: '10px' }}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}{' '}\n\t\t\t\t\t\t\t\trimba - track 1\n\t\t\t\t\t\t\t</p>{' '}\n\t\t\t\t\t\t\t<a>buy track</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))\n\t\t\t\t)}\n\t\t\t</ul>\n\t\t</TracklistContainer>\n\t);\n};\n\nTracklist.propTypes = {\n\tsetAudioPlaing: PropTypes.func,\n\tsetAudioPaused: PropTypes.func,\n\tplaying: PropTypes.bool,\n\tcurrentTrack: PropTypes.object\n};\n\nconst mapStateToProps = (state) => ({ audio: state.audio });\n\nexport default connect(mapStateToProps, { setAudioPlaying, setAudioPaused })(Tracklist);\n"]},"metadata":{},"sourceType":"module"}