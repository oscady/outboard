{"ast":null,"code":"import { SET_AUDIO_PLAYING, SET_AUDIO_PAUSED, AUDIO_PLAYING, AUDIO_PAUSED, TRACKS_LOADING, GET_TRACKS, NEXT_TRACK, PREV_TRACK, SET_CURRENT_TRACK_MOMENT, SET_CURRENT_TRACK_DURATION, SET_PLAYLIST_LOADING, SET_PLAYLIST_LOADED } from './types';\nimport axios from 'axios'; // get items action sent to reducer\n\nexport const getTracks = () => async dispatch => {\n  dispatch(setPlaylistLoading(console.log('items are loading...')));\n  await axios.get('/api/playlists').then(res => dispatch({\n    type: GET_TRACKS,\n    payload: res.data\n  }));\n  setPlaylistLoaded();\n}; //\n\nexport const setCurrentTrackDuration = () => dispatch => {\n  axios.get('/api/playlists').then(res => dispatch({\n    type: GET_TRACKS,\n    payload: res.data\n  }));\n}; // get single project\n// export const getSingleTrack = (id) => (dispatch) => {\n// \tdispatch(setItemsLoading());\n// \taxios\n// \t\t.get(`/data/playlist`)\n// \t\t.then((res) => dispatch({ type: GET_SINGLE_ITEM, payload: res.data }))\n// \t\t.catch((err) => console.error(\"Can't get item\", err));\n// };\n// // add new item sent to reducer\n// export const addItem = (item) => (dispatch) => {\n// \tdispatch(setItemsLoading(console.log('items are loading...')));\n// \taxios.post('/api/items', item).then((res) =>\n// \t\tdispatch({\n// \t\t\ttype: ADD_ITEM,\n// \t\t\tpayload: res.data\n// \t\t})\n// \t);\n// };\n// // delete item by id request sent to reducer\n// export const deleteItem = (id) => (dispatch) => {\n// \taxios.delete(`/api/items/${id}`).then((res) =>\n// \t\tdispatch({\n// \t\t\ttype: DELETE_ITEM,\n// \t\t\tpayload: id\n// \t\t})\n// \t);\n// };\n// loading items graphic sent to reducer\n\nexport const setPlaylistLoading = () => {\n  return {\n    type: SET_PLAYLIST_LOADING\n  };\n}; // loading items graphic sent to reducer\n\nexport const setPlaylistLoaded = () => {\n  return {\n    type: SET_PLAYLIST_LOADED\n  };\n}; // loading items graphic sent to reducer\n\nexport const setAudioPlaying = () => {\n  return {\n    type: SET_AUDIO_PLAYING\n  };\n}; // loading items graphic sent to reducer\n\nexport const setAudioPaused = () => {\n  return {\n    type: SET_AUDIO_PAUSED\n  };\n};","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/actions/audioActions.js"],"names":["SET_AUDIO_PLAYING","SET_AUDIO_PAUSED","AUDIO_PLAYING","AUDIO_PAUSED","TRACKS_LOADING","GET_TRACKS","NEXT_TRACK","PREV_TRACK","SET_CURRENT_TRACK_MOMENT","SET_CURRENT_TRACK_DURATION","SET_PLAYLIST_LOADING","SET_PLAYLIST_LOADED","axios","getTracks","dispatch","setPlaylistLoading","console","log","get","then","res","type","payload","data","setPlaylistLoaded","setCurrentTrackDuration","setAudioPlaying","setAudioPaused"],"mappings":"AAAA,SACCA,iBADD,EAECC,gBAFD,EAGCC,aAHD,EAICC,YAJD,EAKCC,cALD,EAMCC,UAND,EAOCC,UAPD,EAQCC,UARD,EASCC,wBATD,EAUCC,0BAVD,EAWCC,oBAXD,EAYCC,mBAZD,QAaO,SAbP;AAcA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAClDA,EAAAA,QAAQ,CAACC,kBAAkB,CAACC,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAAD,CAAnB,CAAR;AACA,QAAML,KAAK,CAACM,GAAN,CAAU,gBAAV,EAA4BC,IAA5B,CAAkCC,GAAD,IACtCN,QAAQ,CAAC;AACRO,IAAAA,IAAI,EAAEhB,UADE;AAERiB,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFL,GAAD,CADH,CAAN;AAMAC,EAAAA,iBAAiB;AACjB,CATM,C,CAWP;;AACA,OAAO,MAAMC,uBAAuB,GAAG,MAAOX,QAAD,IAAc;AAC1DF,EAAAA,KAAK,CAACM,GAAN,CAAU,gBAAV,EAA4BC,IAA5B,CAAkCC,GAAD,IAChCN,QAAQ,CAAC;AACRO,IAAAA,IAAI,EAAEhB,UADE;AAERiB,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFL,GAAD,CADT;AAMA,CAPM,C,CASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMR,kBAAkB,GAAG,MAAM;AACvC,SAAO;AACNM,IAAAA,IAAI,EAAEX;AADA,GAAP;AAGA,CAJM,C,CAMP;;AACA,OAAO,MAAMc,iBAAiB,GAAG,MAAM;AACtC,SAAO;AACNH,IAAAA,IAAI,EAAEV;AADA,GAAP;AAGA,CAJM,C,CAMP;;AACA,OAAO,MAAMe,eAAe,GAAG,MAAM;AACpC,SAAO;AACNL,IAAAA,IAAI,EAAErB;AADA,GAAP;AAGA,CAJM,C,CAMP;;AACA,OAAO,MAAM2B,cAAc,GAAG,MAAM;AACnC,SAAO;AACNN,IAAAA,IAAI,EAAEpB;AADA,GAAP;AAGA,CAJM","sourcesContent":["import {\n\tSET_AUDIO_PLAYING,\n\tSET_AUDIO_PAUSED,\n\tAUDIO_PLAYING,\n\tAUDIO_PAUSED,\n\tTRACKS_LOADING,\n\tGET_TRACKS,\n\tNEXT_TRACK,\n\tPREV_TRACK,\n\tSET_CURRENT_TRACK_MOMENT,\n\tSET_CURRENT_TRACK_DURATION,\n\tSET_PLAYLIST_LOADING,\n\tSET_PLAYLIST_LOADED\n} from './types';\nimport axios from 'axios';\n\n// get items action sent to reducer\nexport const getTracks = () => async (dispatch) => {\n\tdispatch(setPlaylistLoading(console.log('items are loading...')));\n\tawait axios.get('/api/playlists').then((res) =>\n\t\tdispatch({\n\t\t\ttype: GET_TRACKS,\n\t\t\tpayload: res.data\n\t\t})\n\t);\n\tsetPlaylistLoaded();\n};\n\n//\nexport const setCurrentTrackDuration = () => (dispatch) => {\n\taxios.get('/api/playlists').then((res) =>\n\t\tdispatch({\n\t\t\ttype: GET_TRACKS,\n\t\t\tpayload: res.data\n\t\t})\n\t);\n};\n\n// get single project\n// export const getSingleTrack = (id) => (dispatch) => {\n// \tdispatch(setItemsLoading());\n// \taxios\n// \t\t.get(`/data/playlist`)\n// \t\t.then((res) => dispatch({ type: GET_SINGLE_ITEM, payload: res.data }))\n// \t\t.catch((err) => console.error(\"Can't get item\", err));\n// };\n\n// // add new item sent to reducer\n// export const addItem = (item) => (dispatch) => {\n// \tdispatch(setItemsLoading(console.log('items are loading...')));\n// \taxios.post('/api/items', item).then((res) =>\n// \t\tdispatch({\n// \t\t\ttype: ADD_ITEM,\n// \t\t\tpayload: res.data\n// \t\t})\n// \t);\n// };\n\n// // delete item by id request sent to reducer\n// export const deleteItem = (id) => (dispatch) => {\n// \taxios.delete(`/api/items/${id}`).then((res) =>\n// \t\tdispatch({\n// \t\t\ttype: DELETE_ITEM,\n// \t\t\tpayload: id\n// \t\t})\n// \t);\n// };\n\n// loading items graphic sent to reducer\nexport const setPlaylistLoading = () => {\n\treturn {\n\t\ttype: SET_PLAYLIST_LOADING\n\t};\n};\n\n// loading items graphic sent to reducer\nexport const setPlaylistLoaded = () => {\n\treturn {\n\t\ttype: SET_PLAYLIST_LOADED\n\t};\n};\n\n// loading items graphic sent to reducer\nexport const setAudioPlaying = () => {\n\treturn {\n\t\ttype: SET_AUDIO_PLAYING\n\t};\n};\n\n// loading items graphic sent to reducer\nexport const setAudioPaused = () => {\n\treturn {\n\t\ttype: SET_AUDIO_PAUSED\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}