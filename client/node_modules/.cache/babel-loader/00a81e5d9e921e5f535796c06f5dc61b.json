{"ast":null,"code":"import { GET_RELEASES, ADD_RELEASE, DELETE_RELEASE, RELEASES_LOADING, GET_SINGLE_RELEASE } from './types';\nimport axios from 'axios'; // get releases action sent to reducer\n\nexport const getReleases = () => dispatch => {\n  dispatch(setItemsLoading(console.log('releases are loading...')));\n  axios.get('/api/releases').then(res => dispatch({\n    type: GET_RELEASES,\n    payload: res.data\n  }));\n}; // get single project\n\nexport const getSingleRelease = id => dispatch => {\n  dispatch(setItemsLoading());\n  axios.get(`/api/releases/${id}`).then(res => dispatch({\n    type: GET_SINGLE_RELEASE,\n    payload: res.data\n  })).catch(err => console.error(\"Can't get release\", err));\n}; // add new release sent to reducer\n\nexport const addRelease = release => dispatch => {\n  dispatch(setItemsLoading(console.log('releases are loading...')));\n  axios.post('/api/releases', release).then(res => dispatch({\n    type: ADD_RELEASE,\n    payload: res.data\n  }));\n}; // delete release by id request sent to reducer\n\nexport const deleteRelease = id => dispatch => {\n  axios.delete(`/api/releases/${id}`).then(res => dispatch({\n    type: DELETE_RELEASE,\n    payload: id\n  }));\n}; // loading releases graphic sent to reducer\n\nexport const setReleasesLoading = release => {\n  return {\n    type: RELEASES_LOADING\n  };\n};","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/actions/releaseActions.js"],"names":["GET_RELEASES","ADD_RELEASE","DELETE_RELEASE","RELEASES_LOADING","GET_SINGLE_RELEASE","axios","getReleases","dispatch","setItemsLoading","console","log","get","then","res","type","payload","data","getSingleRelease","id","catch","err","error","addRelease","release","post","deleteRelease","delete","setReleasesLoading"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,WAAvB,EAAoCC,cAApC,EAAoDC,gBAApD,EAAsEC,kBAAtE,QAAgG,SAAhG;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAACC,eAAe,CAACC,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAD,CAAhB,CAAR;AACAL,EAAAA,KAAK,CAACM,GAAN,CAAU,eAAV,EAA2BC,IAA3B,CAAiCC,GAAD,IAC/BN,QAAQ,CAAC;AACRO,IAAAA,IAAI,EAAEd,YADE;AAERe,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFL,GAAD,CADT;AAMA,CARM,C,CAUP;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,EAAD,IAASX,QAAD,IAAc;AACrDA,EAAAA,QAAQ,CAACC,eAAe,EAAhB,CAAR;AACAH,EAAAA,KAAK,CACHM,GADF,CACO,iBAAgBO,EAAG,EAD1B,EAEEN,IAFF,CAEQC,GAAD,IAASN,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAEV,kBAAR;AAA4BW,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAAzC,GAAD,CAFxB,EAGEG,KAHF,CAGSC,GAAD,IAASX,OAAO,CAACY,KAAR,CAAc,mBAAd,EAAmCD,GAAnC,CAHjB;AAIA,CANM,C,CAQP;;AACA,OAAO,MAAME,UAAU,GAAIC,OAAD,IAAchB,QAAD,IAAc;AACpDA,EAAAA,QAAQ,CAACC,eAAe,CAACC,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAD,CAAhB,CAAR;AACAL,EAAAA,KAAK,CAACmB,IAAN,CAAW,eAAX,EAA4BD,OAA5B,EAAqCX,IAArC,CAA2CC,GAAD,IACzCN,QAAQ,CAAC;AACRO,IAAAA,IAAI,EAAEb,WADE;AAERc,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFL,GAAD,CADT;AAMA,CARM,C,CAUP;;AACA,OAAO,MAAMS,aAAa,GAAIP,EAAD,IAASX,QAAD,IAAc;AAClDF,EAAAA,KAAK,CAACqB,MAAN,CAAc,iBAAgBR,EAAG,EAAjC,EAAoCN,IAApC,CAA0CC,GAAD,IACxCN,QAAQ,CAAC;AACRO,IAAAA,IAAI,EAAEZ,cADE;AAERa,IAAAA,OAAO,EAAEG;AAFD,GAAD,CADT;AAMA,CAPM,C,CASP;;AACA,OAAO,MAAMS,kBAAkB,GAAIJ,OAAD,IAAa;AAC9C,SAAO;AACNT,IAAAA,IAAI,EAAEX;AADA,GAAP;AAGA,CAJM","sourcesContent":["import { GET_RELEASES, ADD_RELEASE, DELETE_RELEASE, RELEASES_LOADING, GET_SINGLE_RELEASE } from './types';\nimport axios from 'axios';\n\n// get releases action sent to reducer\nexport const getReleases = () => (dispatch) => {\n\tdispatch(setItemsLoading(console.log('releases are loading...')));\n\taxios.get('/api/releases').then((res) =>\n\t\tdispatch({\n\t\t\ttype: GET_RELEASES,\n\t\t\tpayload: res.data\n\t\t})\n\t);\n};\n\n// get single project\nexport const getSingleRelease = (id) => (dispatch) => {\n\tdispatch(setItemsLoading());\n\taxios\n\t\t.get(`/api/releases/${id}`)\n\t\t.then((res) => dispatch({ type: GET_SINGLE_RELEASE, payload: res.data }))\n\t\t.catch((err) => console.error(\"Can't get release\", err));\n};\n\n// add new release sent to reducer\nexport const addRelease = (release) => (dispatch) => {\n\tdispatch(setItemsLoading(console.log('releases are loading...')));\n\taxios.post('/api/releases', release).then((res) =>\n\t\tdispatch({\n\t\t\ttype: ADD_RELEASE,\n\t\t\tpayload: res.data\n\t\t})\n\t);\n};\n\n// delete release by id request sent to reducer\nexport const deleteRelease = (id) => (dispatch) => {\n\taxios.delete(`/api/releases/${id}`).then((res) =>\n\t\tdispatch({\n\t\t\ttype: DELETE_RELEASE,\n\t\t\tpayload: id\n\t\t})\n\t);\n};\n\n// loading releases graphic sent to reducer\nexport const setReleasesLoading = (release) => {\n\treturn {\n\t\ttype: RELEASES_LOADING\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}