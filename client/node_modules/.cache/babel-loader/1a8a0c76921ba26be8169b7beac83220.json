{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/oscady/Documents/projects/outboard/client/src/pages/Music/Music.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState, lazy, Suspense, useEffect } from 'react';\nimport { MusicStyled, ContentContainer } from './Music.styled';\nimport Background from '../../components/Basic/Background/Background';\nimport { releaseItems } from '../../data/releases';\nimport { Container } from './SingleMusicItem.styled';\nimport MusicReleaseContainer from './MusicReleaseContainer';\nimport { motion } from 'framer-motion';\nimport Tracklist from './TrackList';\nimport { PageContainer } from '../Basic/PageContainer.styled';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getTracks } from '../../actions/trackUploadActions';\nimport { getReleases } from '../../actions/releaseActions';\nconst SingleMusicItemContainer = /*#__PURE__*/lazy(_c = () => import('./SingleMusicItemContainer'));\n_c2 = SingleMusicItemContainer;\n\nconst renderLoader = () => /*#__PURE__*/_jsxDEV(\"p\", {\n  children: \"Loading\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 28\n}, this);\n\nconst Music = props => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [theImage, setTheImage] = useState();\n  const [currentPlaylist, setCurrentPlaylist] = useState(); // var item = document.getElementsByTagName('MAIN')[0];\n  // window.addEventListener('wheel', function(e) {\n  // \tif (e.deltaY > 0) item.scrollLeft += 100;\n  // \telse item.scrollLeft -= 100;\n  // });\n\n  useEffect(() => {\n    props.getReleases();\n  }, []);\n\n  const toggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PageContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Background, {\n      style: {\n        backgroundSize: '80% 70% !important'\n      },\n      background: \"https://cdn.mems.lol/outboard/leaves-image.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this), props.releases ? /*#__PURE__*/_jsxDEV(MusicStyled, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"PREVIOUS RELEASES\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(ContentContainer, {\n        children: /*#__PURE__*/_jsxDEV(MusicReleaseContainer, {\n          setCurrentPlaylist: setCurrentPlaylist,\n          setTheImage: setTheImage,\n          toggle: toggle,\n          releases: props.releases\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"...loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Music, \"Z9nOBp1HQBZt+JJtsDLGlodlklg=\");\n\n_c3 = Music;\nMusic.propTypes = {\n  getTracks: PropTypes.func.isRequired,\n  track: PropTypes.object,\n  getReleases: PropTypes.func.isRequired,\n  release: PropTypes.object,\n  playing: PropTypes.bool,\n  currentTrack: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  audio: state.audio,\n  track: state.track,\n  releases: state.release.releases\n});\n\nexport default withRouter(connect(mapStateToProps, {\n  getTracks,\n  getReleases\n})(Music));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SingleMusicItemContainer$lazy\");\n$RefreshReg$(_c2, \"SingleMusicItemContainer\");\n$RefreshReg$(_c3, \"Music\");","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/pages/Music/Music.js"],"names":["Fragment","useState","lazy","Suspense","useEffect","MusicStyled","ContentContainer","Background","releaseItems","Container","MusicReleaseContainer","motion","Tracklist","PageContainer","PropTypes","withRouter","connect","getTracks","getReleases","SingleMusicItemContainer","renderLoader","Music","props","isOpen","setIsOpen","theImage","setTheImage","currentPlaylist","setCurrentPlaylist","toggle","backgroundSize","releases","propTypes","func","isRequired","track","object","release","playing","bool","currentTrack","mapStateToProps","state","audio"],"mappings":"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","sourcesContent":["import { Fragment, useState, lazy, Suspense, useEffect } from 'react';\nimport { MusicStyled, ContentContainer } from './Music.styled';\nimport Background from '../../components/Basic/Background/Background';\nimport { releaseItems } from '../../data/releases';\nimport { Container } from './SingleMusicItem.styled';\nimport MusicReleaseContainer from './MusicReleaseContainer';\nimport { motion } from 'framer-motion';\nimport Tracklist from './TrackList';\nimport { PageContainer } from '../Basic/PageContainer.styled';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getTracks } from '../../actions/trackUploadActions';\nimport { getReleases } from '../../actions/releaseActions';\nconst SingleMusicItemContainer = lazy(() => import('./SingleMusicItemContainer'));\nconst renderLoader = () => <p>Loading</p>;\n\nconst Music = (props) => {\n\tconst [ isOpen, setIsOpen ] = useState(false);\n\tconst [ theImage, setTheImage ] = useState();\n\tconst [ currentPlaylist, setCurrentPlaylist ] = useState();\n\t// var item = document.getElementsByTagName('MAIN')[0];\n\n\t// window.addEventListener('wheel', function(e) {\n\t// \tif (e.deltaY > 0) item.scrollLeft += 100;\n\t// \telse item.scrollLeft -= 100;\n\t// });\n\n\tuseEffect(() => {\n\t\tprops.getReleases();\n\t}, []);\n\tconst toggle = () => {\n\t\tsetIsOpen(!isOpen);\n\t};\n\n\treturn (\n\t\t<PageContainer>\n\t\t\t<Background\n\t\t\t\tstyle={{ backgroundSize: '80% 70% !important' }}\n\t\t\t\tbackground='https://cdn.mems.lol/outboard/leaves-image.png'\n\t\t\t/>\n\t\t\t{props.releases ? (\n\t\t\t\t<MusicStyled>\n\t\t\t\t\t<h1>PREVIOUS RELEASES</h1>\n\t\t\t\t\t<ContentContainer>\n\t\t\t\t\t\t<MusicReleaseContainer\n\t\t\t\t\t\t\tsetCurrentPlaylist={setCurrentPlaylist}\n\t\t\t\t\t\t\tsetTheImage={setTheImage}\n\t\t\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\t\t\treleases={props.releases}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ContentContainer>\n\t\t\t\t</MusicStyled>\n\t\t\t) : (\n\t\t\t\t<div>...loading</div>\n\t\t\t)}\n\t\t</PageContainer>\n\t);\n};\n\nMusic.propTypes = {\n\tgetTracks: PropTypes.func.isRequired,\n\ttrack: PropTypes.object,\n\tgetReleases: PropTypes.func.isRequired,\n\trelease: PropTypes.object,\n\tplaying: PropTypes.bool,\n\tcurrentTrack: PropTypes.object\n};\n\nconst mapStateToProps = (state) => ({ audio: state.audio, track: state.track, releases: state.release.releases });\n\nexport default withRouter(connect(mapStateToProps, { getTracks, getReleases })(Music));\n"]},"metadata":{},"sourceType":"module"}