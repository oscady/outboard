{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/oscady/Documents/projects/outboard/client/src/pages/Music/TrackList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { TracklistContainer } from './TrackList.styled';\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport { setAudioPlaying, setAudioPaused } from '../../actions/audioActions';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlaylist, PlaylistContext } from '../../data/playlist';\nimport styled from 'styled-components';\nimport { getTracks } from '../../actions/trackUploadActions';\nimport { getReleases } from '../../actions/releaseActions';\nconst Loading = styled.div`\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n\nconst Tracklist = props => {\n  _s();\n\n  const [currentList, setCurrentList] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState(0); // const handleFetchData = () => {\n  // \tprops.getReleases();\n  // \tconst tracks = props.release.releases;\n  // };\n\n  const handleChangeTrack = id => {\n    setCurrentTrack(id);\n  };\n\n  const handleNextTrack = () => {\n    if (currentTrack === currentList.length - 1) {\n      setCurrentTrack(0);\n      return;\n    }\n\n    setCurrentTrack(currentTrack + 1);\n  };\n\n  const handlePrevTrack = () => {\n    if (currentTrack === 0) {\n      setCurrentTrack(currentList.length - 1);\n      return;\n    }\n\n    setCurrentTrack(currentTrack - 1);\n  };\n\n  useEffect(() => {\n    setCurrentList(props.playlist.tracks);\n    console.log(props);\n  }, [props.playlist]);\n  return /*#__PURE__*/_jsxDEV(PlaylistContext.Provider, {\n    children: /*#__PURE__*/_jsxDEV(TracklistContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.playlist.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"feb 2020\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"featured tracks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentList ? currentList.map((track, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [index === currentTrack ? /*#__PURE__*/_jsxDEV(FaPause, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 35\n          }, this) : /*#__PURE__*/_jsxDEV(FaPlay, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 49\n          }, this), track.artistName, \" - \", track.trackName]\n        }, track._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 8\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \" cunt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Tracklist, \"Lp8mpcAzb7vmZXWW7Y0s7v/C3fc=\");\n\n_c = Tracklist;\nTracklist.propTypes = {\n  setAudioPlaing: PropTypes.func,\n  setAudioPaused: PropTypes.func,\n  getPlaylist: PropTypes.func.isRequired,\n  track: PropTypes.object,\n  getReleases: PropTypes.func.isRequired,\n  release: PropTypes.object,\n  audio: PropTypes.object,\n  playing: PropTypes.bool,\n  currentTrack: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  audio: state.audio,\n  track: state.track,\n  release: state.release\n});\n\nexport default connect(mapStateToProps, {\n  setAudioPlaying,\n  setAudioPaused,\n  getReleases,\n  getTracks\n})(Tracklist);\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracklist\");","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/pages/Music/TrackList.js"],"names":["React","useEffect","useState","TracklistContainer","FaPlay","FaPause","setAudioPlaying","setAudioPaused","PropTypes","connect","fetchPlaylist","PlaylistContext","styled","getTracks","getReleases","Loading","div","Tracklist","props","currentList","setCurrentList","currentTrack","setCurrentTrack","handleChangeTrack","id","handleNextTrack","length","handlePrevTrack","playlist","tracks","console","log","name","map","track","index","artistName","trackName","_id","propTypes","setAudioPlaing","func","getPlaylist","isRequired","object","release","audio","playing","bool","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TracklistContainer } from './TrackList.styled';\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport { setAudioPlaying, setAudioPaused } from '../../actions/audioActions';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlaylist, PlaylistContext } from '../../data/playlist';\nimport styled from 'styled-components';\nimport { getTracks } from '../../actions/trackUploadActions';\nimport { getReleases } from '../../actions/releaseActions';\n\nconst Loading = styled.div`\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n\nconst Tracklist = (props) => {\n\tconst [ currentList, setCurrentList ] = useState([]);\n\tconst [ currentTrack, setCurrentTrack ] = useState(0);\n\n\t// const handleFetchData = () => {\n\t// \tprops.getReleases();\n\t// \tconst tracks = props.release.releases;\n\t// };\n\n\tconst handleChangeTrack = (id) => {\n\t\tsetCurrentTrack(id);\n\t};\n\n\tconst handleNextTrack = () => {\n\t\tif (currentTrack === currentList.length - 1) {\n\t\t\tsetCurrentTrack(0);\n\t\t\treturn;\n\t\t}\n\t\tsetCurrentTrack(currentTrack + 1);\n\t};\n\n\tconst handlePrevTrack = () => {\n\t\tif (currentTrack === 0) {\n\t\t\tsetCurrentTrack(currentList.length - 1);\n\t\t\treturn;\n\t\t}\n\t\tsetCurrentTrack(currentTrack - 1);\n\t};\n\n\tuseEffect(\n\t\t() => {\n\t\t\tsetCurrentList(props.playlist.tracks);\n\t\t\tconsole.log(props);\n\t\t},\n\t\t[ props.playlist ]\n\t);\n\n\treturn (\n\t\t<PlaylistContext.Provider>\n\t\t\t<TracklistContainer>\n\t\t\t\t<h1>{props.playlist.name}</h1>\n\t\t\t\t<h2>feb 2020</h2>\n\t\t\t\t<h3>featured tracks</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t{currentList ? (\n\t\t\t\t\t\tcurrentList.map((track, index) => (\n\t\t\t\t\t\t\t<li key={track._id}>\n\t\t\t\t\t\t\t\t{index === currentTrack ? <FaPause /> : <FaPlay />}\n\t\t\t\t\t\t\t\t{track.artistName} - {track.trackName}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div> cunt</div>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</TracklistContainer>\n\t\t</PlaylistContext.Provider>\n\t);\n};\n\nTracklist.propTypes = {\n\tsetAudioPlaing: PropTypes.func,\n\tsetAudioPaused: PropTypes.func,\n\tgetPlaylist: PropTypes.func.isRequired,\n\ttrack: PropTypes.object,\n\tgetReleases: PropTypes.func.isRequired,\n\trelease: PropTypes.object,\n\taudio: PropTypes.object,\n\tplaying: PropTypes.bool,\n\tcurrentTrack: PropTypes.object\n};\n\nconst mapStateToProps = (state) => ({\n\taudio: state.audio,\n\ttrack: state.track,\n\trelease: state.release\n});\n\nexport default connect(mapStateToProps, { setAudioPlaying, setAudioPaused, getReleases, getTracks })(Tracklist);\n"]},"metadata":{},"sourceType":"module"}