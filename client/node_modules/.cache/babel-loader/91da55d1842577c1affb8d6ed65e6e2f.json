{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/oscady/Documents/projects/outboard/client/src/components/Player/ProgressBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { motion, AnimatePresence, useSpring, useMotionValue, animate } from 'framer-motion';\nconst Container = styled.div`\n\tposition: relative;\n\theight: 100%;\n\twidth: 100%;\n\tbackground-color: black;\n\tborder-radius: 5px;\n\tz-index: 100;\n\tdisplay: flex;\n\talign-items: center;\n\n\th3 {\n\t\tfont-size: 1.1rem;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tcolor: white;\n\t\twidth: fit-content;\n\t\twhite-space: nowrap;\n\t\tleft: 100px;\n\t\tmargin: 0;\n\t}\n`;\n_c = Container;\nconst Point = styled(motion.div)`\n\t\tposition: absolute;\n\t\tleft: ${props => props.progressPercent};\n\t\ttop: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t\tbottom: 10px;\n\t\theight: 100%;\n\t\twidth: 8px;\n\t\tbackground-color: black;\n\t\tborder-radius: 50%;\n\t`;\nconst Progress = styled(motion.div)`\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\tbottom: 10px;\n\t\theight: inherit;\n\t\tbackground-color: whitesmoke;\n\t\toverflow:hidden;\n\t\tz-index: 101;\n\t\tdisplay: flex;\n\talign-items: center;\n\n\t\th3 {\n\t\t\tfont-size:1.1rem;\n\t\t\tfont-weight: bold;\n\t\t\tposition: relative;\n\t\t\twidth: fit-content;\n\t\t\twhite-space:nowrap;\n\t\t\tleft: 100px;\n\t\t\tcolor: black;\n\t\t\tmargin: 0;\n\t\t}\n\t`;\n_c2 = Progress;\n\nconst ProgressBar = props => {\n  _s();\n\n  const [progressValue, setProgressValue] = useState(0);\n  useEffect(() => {\n    setProgressValue(props.duration);\n  }, [props.duration]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [props.currentTrack.artistName, \" - \", props.currentTrack.trackName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: /*#__PURE__*/_jsxDEV(Progress, {\n        progressPercent: props.progressPercent,\n        initial: {\n          width: '0%'\n        },\n        animate: {\n          width: props.progress\n        },\n        exit: {\n          width: '0%'\n        },\n        transition: {\n          type: 'inertia',\n          stiffness: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [props.currentTrack.artistName, \" - \", props.currentTrack.trackName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ProgressBar, \"w/59kiQcd2loNjkPmN4ZTWEhqXU=\");\n\n_c3 = ProgressBar;\nProgressBar.propTypes = {\n  progressPercent: PropTypes.string,\n  duration: PropTypes.number.isRequired,\n  width: PropTypes.string,\n  audio: PropTypes.object,\n  currentTrack: PropTypes.array\n};\n\nconst mapStateToProps = state => ({\n  audio: state.audio,\n  track: state.track,\n  release: state.release,\n  currentTrack: state.audio.currentTrack,\n  currentTrackDuration: state.audio.currentTrackDuration,\n  currentTrackMoment: state.audio.currentTrackMoment\n});\n\nexport default connect(mapStateToProps)(ProgressBar);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Progress\");\n$RefreshReg$(_c3, \"ProgressBar\");","map":{"version":3,"sources":["/home/oscady/Documents/projects/outboard/client/src/components/Player/ProgressBar.js"],"names":["React","useState","useEffect","PropTypes","connect","styled","motion","AnimatePresence","useSpring","useMotionValue","animate","Container","div","Point","props","progressPercent","Progress","ProgressBar","progressValue","setProgressValue","duration","currentTrack","artistName","trackName","width","progress","type","stiffness","propTypes","string","number","isRequired","audio","object","array","mapStateToProps","state","track","release","currentTrackDuration","currentTrackMoment"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { motion, AnimatePresence, useSpring, useMotionValue, animate } from 'framer-motion';\n\nconst Container = styled.div`\n\tposition: relative;\n\theight: 100%;\n\twidth: 100%;\n\tbackground-color: black;\n\tborder-radius: 5px;\n\tz-index: 100;\n\tdisplay: flex;\n\talign-items: center;\n\n\th3 {\n\t\tfont-size: 1.1rem;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tcolor: white;\n\t\twidth: fit-content;\n\t\twhite-space: nowrap;\n\t\tleft: 100px;\n\t\tmargin: 0;\n\t}\n`;\n\nconst Point = styled(motion.div)`\n\t\tposition: absolute;\n\t\tleft: ${(props) => props.progressPercent};\n\t\ttop: 50%;\n\t\ttransform: translate(-50%, -50%);\n\t\tbottom: 10px;\n\t\theight: 100%;\n\t\twidth: 8px;\n\t\tbackground-color: black;\n\t\tborder-radius: 50%;\n\t`;\nconst Progress = styled(motion.div)`\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\tbottom: 10px;\n\t\theight: inherit;\n\t\tbackground-color: whitesmoke;\n\t\toverflow:hidden;\n\t\tz-index: 101;\n\t\tdisplay: flex;\n\talign-items: center;\n\n\t\th3 {\n\t\t\tfont-size:1.1rem;\n\t\t\tfont-weight: bold;\n\t\t\tposition: relative;\n\t\t\twidth: fit-content;\n\t\t\twhite-space:nowrap;\n\t\t\tleft: 100px;\n\t\t\tcolor: black;\n\t\t\tmargin: 0;\n\t\t}\n\t`;\n\nconst ProgressBar = (props) => {\n\tconst [ progressValue, setProgressValue ] = useState(0);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tsetProgressValue(props.duration);\n\t\t},\n\t\t[ props.duration ]\n\t);\n\treturn (\n\t\t<Container>\n\t\t\t<h3>\n\t\t\t\t{props.currentTrack.artistName} - {props.currentTrack.trackName}\n\t\t\t</h3>\n\t\t\t<AnimatePresence>\n\t\t\t\t<Progress\n\t\t\t\t\tprogressPercent={props.progressPercent}\n\t\t\t\t\tinitial={{ width: '0%' }}\n\t\t\t\t\tanimate={{ width: props.progress }}\n\t\t\t\t\texit={{ width: '0%' }}\n\t\t\t\t\ttransition={{ type: 'inertia', stiffness: 1 }}>\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t{props.currentTrack.artistName} - {props.currentTrack.trackName}\n\t\t\t\t\t</h3>\n\t\t\t\t</Progress>\n\t\t\t</AnimatePresence>\n\t\t</Container>\n\t);\n};\n\nProgressBar.propTypes = {\n\tprogressPercent: PropTypes.string,\n\tduration: PropTypes.number.isRequired,\n\twidth: PropTypes.string,\n\taudio: PropTypes.object,\n\tcurrentTrack: PropTypes.array\n};\n\nconst mapStateToProps = (state) => ({\n\taudio: state.audio,\n\ttrack: state.track,\n\trelease: state.release,\n\tcurrentTrack: state.audio.currentTrack,\n\tcurrentTrackDuration: state.audio.currentTrackDuration,\n\tcurrentTrackMoment: state.audio.currentTrackMoment\n});\n\nexport default connect(mapStateToProps)(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}